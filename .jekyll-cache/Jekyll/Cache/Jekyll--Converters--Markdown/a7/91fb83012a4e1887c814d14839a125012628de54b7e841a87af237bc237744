I"SK<p>Update: vue源码中双向绑定的实现</p>

<hr />

<p>本篇文章是在vue源码略读之后开始仔细看vue最著名的双向绑定的具体实现原理,从而看到了proxy和defineProperty
下面开始具体讲一下个人的理解</p>

<p>vue的双向绑定其实就是使用了所谓的数据劫持</p>
<blockquote>
  <p>数据劫持:指的是在访问或者修改对象的某个属性时，通过一段代码拦截这个行为，进行额外的操作或者修改返回结果</p>
</blockquote>

<p>目前典型的两种方式就是Object.defineProperty和proxy对象</p>

<p>先看一下vue使用的defineProperty</p>

<h2 id="objectdefineproperty">Object.defineProperty</h2>

<p>每次去面试基本必问的东西</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="dl">'</span><span class="s1">arr</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
  <span class="kd">get</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">get arr</span><span class="dl">'</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">arr</span>
  <span class="p">},</span>
  <span class="kd">set</span> <span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">set</span><span class="dl">'</span><span class="p">,</span> <span class="nx">newVal</span><span class="p">)</span>
    <span class="nx">arr</span> <span class="o">=</span> <span class="nx">newVal</span>
  <span class="p">}</span>
<span class="p">})</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="c1">// 只会打印 get arr, 不会打印 set</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span> <span class="c1">// 这个能正常 set</span>

</pre></td></tr></tbody></table></code></pre></div></div>
<p>数组的以下几个方法不会触发 set：
<code class="highlighter-rouge">push
</code>pop
<code class="highlighter-rouge">shift
</code>unshift
<code class="highlighter-rouge">splice
</code>sort
`reverse
Vue 把这些方法定义为变异方法 (mutation method)，指的是会修改原来数组的方法。与之对应则是非变异方法 (non-mutating method)，例如 filter, concat, slice 等，它们都不会修改原始数组，而会返回一个新的数组。Vue 官网有相关文档讲述这个问题。</p>

<p>使用 Object.defineProperty() 多数要配合 Object.keys() 和遍历，于是多了一层嵌套。如：</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">info</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">eason</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">key</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">})</span>
<span class="p">})</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>如果是这一类嵌套对象，那就必须逐层遍历，直到把每个对象的每个属性都调用 Object.defineProperty() 为止。 Vue 的源码中就能找到这样的逻辑 (叫做 walk 方法)。</p>

<h1 id="proxy">Proxy</h1>

<p>Proxy是针对整个对象,而不是对象的某个属性,不需要对 keys 进行遍历。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Eason</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">30</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">handler</span> <span class="o">=</span> <span class="p">{</span>
  <span class="kd">get</span> <span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">receiver</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">get</span><span class="dl">'</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">Reflect</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">receiver</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="kd">set</span> <span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">receiver</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">set</span><span class="dl">'</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">Reflect</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">receiver</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Proxy</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">handler</span><span class="p">)</span>
<span class="nx">proxy</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Zoe</span><span class="dl">'</span> <span class="c1">// set name Zoe</span>
<span class="nx">proxy</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">18</span> <span class="c1">// set age 18</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="嵌套支持">嵌套支持</h4>
<p>本质上，Proxy 也是不支持嵌套的，这点和 Object.defineProperty() 是一样的。因此也需要通过逐层遍历来解决。Proxy 的写法是在 get 里面递归调用 Proxy 并返回，代码如下：</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">info</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">eason</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">blogs</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">webpack</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">babel</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">cache</span><span class="dl">'</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">handler</span> <span class="o">=</span> <span class="p">{</span>
  <span class="kd">get</span> <span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">receiver</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">get</span><span class="dl">'</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
    <span class="c1">// 递归创建并返回</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nb">Proxy</span><span class="p">(</span><span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">],</span> <span class="nx">handler</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">Reflect</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">receiver</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="kd">set</span> <span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">receiver</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">set</span><span class="dl">'</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">Reflect</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">receiver</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Proxy</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">handler</span><span class="p">)</span>
<span class="c1">// 以下两句都能够进入 set</span>
<span class="nx">proxy</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Zoe</span><span class="dl">'</span>
<span class="nx">proxy</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">blogs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">proxy</span><span class="dl">'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h1 id="面试题">面试题</h1>
<p>看一下经常遇到的面试题</p>

<p><code class="highlighter-rouge">什么样的 a 可以满足 (a === 1 &amp;&amp; a === 2 &amp;&amp; a === 3) === true 呢？(注意是 3 个 =，也就是严格相等)</code></p>

<p>原来的方法</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="mi">0</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
  <span class="kd">get</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">current</span><span class="o">++</span>
    <span class="k">return</span> <span class="nx">current</span>
  <span class="p">}</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">a</span> <span class="o">===</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="nx">a</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">// true</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>使用Proxy</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">foo</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">bar</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">bar</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// 正常状态下，对象只能继承一个对象，要么有 foo()，要么有 bar()</span>
<span class="kd">let</span> <span class="nx">sonOfFoo</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span>
<span class="nx">sonOfFoo</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>     <span class="c1">// foo</span>
<span class="kd">let</span> <span class="nx">sonOfBar</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">bar</span><span class="p">);</span>
<span class="nx">sonOfBar</span><span class="p">.</span><span class="nx">bar</span><span class="p">();</span>     <span class="c1">// bar</span>
<span class="c1">// 黑科技开始</span>
<span class="kd">let</span> <span class="nx">sonOfFooBar</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Proxy</span><span class="p">({},</span> <span class="p">{</span>
  <span class="kd">get</span> <span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">||</span> <span class="nx">foo</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">||</span> <span class="nx">bar</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
  <span class="p">}</span>
<span class="p">})</span>
<span class="c1">// 我们创造了一个对象同时继承了两个对象，foo() 和 bar() 同时拥有</span>
<span class="nx">sonOfFooBar</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>   <span class="c1">// foo 有foo方法，继承自对象foo</span>
<span class="nx">sonOfFooBar</span><span class="p">.</span><span class="nx">bar</span><span class="p">();</span>   <span class="c1">// bar 也有bar方法，继承自对象bar</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET